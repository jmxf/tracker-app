print(rounded_avg_dist)
#finale Kalkulation
total_dist_travelled_km <- (haushalte - 1) * rounded_avg_dist
total_dist_travelled_m <- total_dist_travelled_km * 1000
time_sec <- 30 * 60 * 60
speed_m_sec <- total_dist_travelled_m / time
speed_m_sec <- total_dist_travelled_m / time_sec
print(speed_m_sec)
281+179
total_dist_travelled_km <- (haushalte) * rounded_avg_dist
total_dist_travelled_m <- total_dist_travelled_km * 1000
time_sec <- 30 * 60 * 60
speed_m_sec <- total_dist_travelled_m / time_sec
print(speed_m_sec)
total_dist_travelled_km <- (haushalte - 1) * rounded_avg_dist
total_dist_travelled_m <- total_dist_travelled_km * 1000
time_sec <- 30 * 60 * 60
speed_m_sec <- total_dist_travelled_m / time_sec
print(speed_m_sec)
side_length <- sqrt(house_area)
#finale Kalkulation
avg_distance_adj <- rounded_avg_dist * side_length
total_dist_travelled_km <- (haushalte - 1) * avg_distance_adj
total_dist_travelled_m <- total_dist_travelled_km * 1000
time_sec <- 30 * 60 * 60
speed_m_sec <- total_dist_travelled_m / time_sec
print(speed_m_sec)
library(tidyverse)
library(nycflights13)
(1:3 + 1:10)
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
########
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delay2 <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay2, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
ggplot(data = delay2, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delays3 <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
View(delays3)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, date) %>%
summarise(mean = mean(dep_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
delays4 <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
View(delays4)
ggplot(data = delays4, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays5 <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
n = n(),
delay = mean(arr_delay, na.rm = TRUE)
)
ggplot(data = delays5, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 0.1)
delays5 %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 0.1)
install.packages("Lahman")
library(Lahman)
batting <- as.tibble(Lahman::Batting)
batting <- as_tibble(Lahman::Batting)
batters <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
library(tidyverse)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
cut_count <- diamonds %>%
count(cut)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.1)
diamonds %>%
count(cut_width(x = carat, 0.1))
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.01)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = faithful, mapping = aes(x = eruptions)) +
geom_histogram(binwidth = 0.1)
?diamonds
?coord_cartesian
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
unusual <- diamonds %>%
filter(y < 3 | y > 20) %>%
select(price, x, y, z) %>%
arrange(y)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price)) +
coord_cartesian(xlim = c(1000, 2000))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = price), binwidth = 10) +
xlim(1000, 2000)
carat_count <- diamonds %>%
filter(carat == 0.99 | carat == 1) %>%
group_by(carat) %>%
summarise(count = n())
?dply::case_when()
?dplyr::case_when()
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %%100,
sched_dep_time = sched_hour + sched_min / 60
)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %%100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
ggplot(data = flights, mapping = aes(x = sched_dep_time)) +
geom_histogram()
ggplot(data = nycflights13::flights, mapping = aes(x = sched_dep_time)) +
geom_histogram()
ggplot(data = nycflights13::flights, mapping = aes(x = dep_time)) +
geom_histogram()
ggplot(data = nycflights13::flights, mapping = aes(x = dep_time) +
ggplot(data = nycflights13::flights, mapping = aes(x = dep_time)) +
geom_bar()
ggplot(data = nycflights13::flights, mapping = aes(x = dep_time)) +
geom_histogram(binwidth = 1)
ggplot(data = nycflights13::flights, mapping = aes(x = dep_time)) +
geom_bar()
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(diamonds2, aes(x = y)) +
geom_histogram()
ggplot(diamonds2, aes(x = y)) +
geom_bar()
diamonds %>%
mutate(cut = if_else(runif(n()) < 0.1, NA_character_, as.character(cut))) %>%
ggplot() +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
ggplot(data = diamonds, mapping = aes(x = price, y = ..density..)) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = class, y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %%100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %%100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(x = sched_dep_time, y = ..density..)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %%100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(x = cancelled, y = sched_dep_time)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = cut)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = color, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = color, y = price)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = clarity, y = price)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = x, y = price)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = x, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = y, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = z, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = depth, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = table, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = cut, y = carat)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)), orientation = "x")
install.packages("ggstance")
library(ggstance)
?ggstance
??ggstance
?ggstance::geom_boxploth
ggplot(data = diamonds, mapping = aes(x = cut, y = carat)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = cut, y = carat)) +
geom_boxploth()
ggplot(data = diamonds, mapping = aes(x = carat, y = cut)) +
geom_boxploth()
ggplot(data = diamonds, mapping = aes(x = cut, y = carat)) +
geom_boxplot() +
coord_flip()
ggplot(data = diamonds, mapping = aes(x = carat, y = cut)) +
geom_boxploth()
install.packages("lvplot")
library(lvplot)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_lv()
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_lv(mapping = aes(group = cut_width(carat, 0.1)), orientation = "x")
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_lv(mapping = aes(group = cut_width(carat, 0.5)), orientation = "x")
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_lv(mapping = aes(group = cut_width(carat, 0.5)))
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_lv()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_violin()
install.packages("ggbeeswarm")
library(ggbeeswarm)
??ggbeeswarm
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_beeswarm()
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_quasirandom()
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = cut, y = color)) +
geom_tile()
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = cut, y = color)) +
geom_tile(mapping = aes(colour = n))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = cut, y = color)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%
mutate(
n = count(color, cut),
prop_cut = n / sum(color)
) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop_cut))
diamonds %>%
count(color, cut) %>%
mutate(prop_cut = n / sum(color)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop_cut))
diamonds %>%
count(color, cut) %>%
mutate(prop_cut = n / sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop_cut))
diamonds %>%
count(color, cut)
diamonds %>%
group_by(cut) %>%
count(color) %>%
mutate(prop_color = n / sum(n))
diamonds %>%
group_by(cut) %>%
count(color)
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n / sum(n))
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n / sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop))
nycflights13::flights %>%
count(dest, month) %>%
ggplot(mapping = aes(x = month, y = dest)) +
geom_tile(mapping = aes(fill = n))
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point(alpha = 0.5)
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point(alpha = 0.25)
ggplot(data = diamonds, mapping = aes(x = carat, y = price)) +
geom_point(alpha = 0.1)
install.packages("hexbin")
library(hexbin)
View(smaller)
view(diamonds)
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(price, 1000)))
ggplot(data = smaller, mapping = aes(x = price, y = carat)) +
geom_boxplot(mapping = aes(group = cut_width(price, 1000)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_number(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_number(carat, 20)))
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(group = cut_width(carat, 0.1)), binwidth = 100)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(group = cut_width(carat, 0.1), colour = group), binwidth = 100)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut_width(carat, 0.1)), binwidth = 100)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut_width(carat, 0.25)), binwidth = 100)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut_width(carat, 0.25)), binwidth = 500)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut_width(carat, 0.5)), binwidth = 500)
ggplot(data = smaller, mapping = aes(x = price, y = carat)) +
geom_boxplot(mapping = aes(group = cut_number(price, 20)))
ggplot(data = smaller, mapping = aes(x = price, y = carat)) +
geom_boxplot(mapping = aes(group = cut_width(price, 500)))
ggplot(data = smaller, mapping = aes(x = price)) +
geom_histogram(binwidth = 100)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_histogram(binwidth = 1000)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_histogram(binwidth = 10)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_histogram(binwidth = 1)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_histogram(binwidth = 100)
diamonds %>%
filter(carat == 0.99 | carat == 1) %>%
group_by(carat) %>%
mutate(count = n())
diamonds %>%
filter(carat == 0.99 | carat == 1) %>%
group_by(carat) %>%
mutate(count = n()) %>%
select(carat, count)
diamonds %>%
count(carat) %>%
group_by(carat)
diamonds %>%
count(carat) %>%
group_by(carat) %>%
filter(carat == 0.99 | carat = 1)
diamonds %>%
count(carat) %>%
group_by(carat) %>%
filter(carat == 0.99 | carat == 1)
ggplot(data = smaller, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut_width(carat, 0.5)), binwidth = 500)
ggplot(data = smaller, mapping = aes(x = price, y = ..density..)) +
geom_freqpoly(mapping = aes(colour = cut_width(carat, 0.5)), binwidth = 500)
ggplot(data = diamonds,mapping = aes(x = cut_number(carat, 5), y = price, colour = cut)) +
geom_boxplot()
ggplot(data = diamonds, mapping = aes(x = x, y = y)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = x, y = y)) +
geom_point() +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting))
package_version("modelr")
install.packages("modelr")
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
mod <- lm(log(price) ~ log(carat), data = diamonds)
is.data.frame(diamonds)
diamonds
ggplot(data = diamonds, mapping = aes(x = x, y = y)) +
geom_point() +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
library(tidyverse)
library(ggstance)
library(lvplot)
library(ggbeeswarm)
library(hexbin)
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
View(mod)
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
View(diamonds2)
ggplot(data = diamonds2) +
geom_point(mapping = aes(x = carat, y = resid))
ggplot(data = diamonds2) +
geom_boxplot(mapping = aes(x = cut, y = resid))
ggplot(faithful, aes(eruptions)) +
geom_freqpoly(binwidth = 0.25)
diamonds %>%
count(cut, clarity) %>%
ggplot(aes(clarity, cut, fill = n)) +
geom_tile()
?diamonds
getwd()
library(tidyverse)
library(lubridate)
test_tib <- tibble("num" = 1:10, "time" = now(), "string" = c("hi", "was", "geht", "denn", "da", "ab", "li", "lu", "nu", "ni"))
View(test_tib)
getwd()
setwd("Coding/R Shiny Apps")
getwd()
setwd(tracker-app)
setwd("tracker-app")
getwd()
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World!")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
